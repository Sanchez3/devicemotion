{"version":3,"sources":["webpack:///./node_modules/howler/dist/howler.js","webpack:///(webpack)/buildin/global.js"],"names":["global","__WEBPACK_AMD_DEFINE_RESULT__","HowlerGlobal","this","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_unlockAudio","shouldUnlock","test","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","_resumeAfterSuspend","Howl","o","src","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhrWithCredentials","xhrWithCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","stop","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_interval","args","indexOf","apply","fade","from","to","len","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","min","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","index","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","error","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","withCredentials","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","exports","module","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner","g","Function"],"mappings":"+EAAA,SAAAA,GAAA,IAAAC,GAUA,WAEA,aASA,IAAAC,EAAA,WACAC,KAAAC,QAEAF,EAAAG,WAKAD,KAAA,WACA,IAAAE,EAAAH,MAAAI,EA8BA,OA3BAD,EAAAE,SAAA,IAGAF,EAAAG,mBACAH,EAAAI,cAAA,GAGAJ,EAAAK,WACAL,EAAAM,UACAN,EAAAO,OAAA,MACAP,EAAAQ,QAAA,EACAR,EAAAS,cAAA,iBACAT,EAAAU,WAAA,oBAAAC,eAAAC,UAAAD,OAAAC,UAAA,KAGAZ,EAAAa,WAAA,KACAb,EAAAc,QAAA,MACAd,EAAAe,cAAA,KACAf,EAAAgB,YAAA,KACAhB,EAAAiB,IAAA,KAGAjB,EAAAkB,WAAA,KAGAlB,EAAAmB,SAEAnB,GAQAoB,OAAA,SAAAC,GACA,IAAArB,EAAAH,MAAAI,EAQA,GAPAoB,EAAAC,WAAAD,GAGArB,EAAAiB,KACAM,SAGA,IAAAF,MAAA,GAAAA,GAAA,GAIA,GAHArB,EAAAQ,QAAAa,EAGArB,EAAAO,OACA,OAAAP,EAIAA,EAAAe,eACAf,EAAAa,WAAAW,KAAAC,eAAAJ,EAAApB,EAAAgB,IAAAS,aAIA,QAAAC,EAAA,EAAqBA,EAAA3B,EAAAM,OAAAsB,OAAsBD,IAC3C,IAAA3B,EAAAM,OAAAqB,GAAAE,UAKA,IAHA,IAAAC,EAAA9B,EAAAM,OAAAqB,GAAAI,eAGAC,EAAA,EAAyBA,EAAAF,EAAAF,OAAcI,IAAA,CACvC,IAAAC,EAAAjC,EAAAM,OAAAqB,GAAAO,WAAAJ,EAAAE,IAEAC,KAAAE,QACAF,EAAAE,MAAAf,OAAAa,EAAAzB,QAAAa,GAMA,OAAArB,EAGA,OAAAA,EAAAQ,SAOA4B,KAAA,SAAAC,GACA,IAAArC,EAAAH,MAAAI,EAGAD,EAAAiB,KACAM,IAGAvB,EAAAO,OAAA8B,EAGArC,EAAAe,eACAf,EAAAa,WAAAW,KAAAC,eAAAY,EAAA,EAAArC,EAAAQ,QAAAP,EAAAgB,IAAAS,aAIA,QAAAC,EAAA,EAAmBA,EAAA3B,EAAAM,OAAAsB,OAAsBD,IACzC,IAAA3B,EAAAM,OAAAqB,GAAAE,UAKA,IAHA,IAAAC,EAAA9B,EAAAM,OAAAqB,GAAAI,eAGAC,EAAA,EAAuBA,EAAAF,EAAAF,OAAcI,IAAA,CACrC,IAAAC,EAAAjC,EAAAM,OAAAqB,GAAAO,WAAAJ,EAAAE,IAEAC,KAAAE,QACAF,EAAAE,MAAAE,QAAA,GAAAJ,EAAA1B,QAMA,OAAAP,GAOAsC,OAAA,WAGA,IAFA,IAAAtC,EAAAH,MAAAI,EAEA0B,EAAA3B,EAAAM,OAAAsB,OAAA,EAAsCD,GAAA,EAAMA,IAC5C3B,EAAAM,OAAAqB,GAAAW,SAUA,OANAtC,EAAAe,eAAAf,EAAAiB,UAAA,IAAAjB,EAAAiB,IAAAsB,QACAvC,EAAAiB,IAAAsB,QACAvC,EAAAiB,IAAA,KACAM,KAGAvB,GAQAwC,OAAA,SAAAC,GACA,OAAA5C,MAAAI,GAAAI,QAAAoC,EAAAC,QAAA,YAOAvB,OAAA,WACA,IAAAnB,EAAAH,MAAAI,EASA,GANAD,EAAA2C,MAAA3C,EAAAiB,KAAAjB,EAAAiB,IAAA0B,OAAA,YAGA3C,EAAA4C,gBAGA5C,EAAAe,cAEA,uBAAA8B,MACA,SAIA,KAHA,IAAAA,OAGAC,mBACA9C,EAAAS,cAAA,WAEW,MAAAsC,GACX/C,EAAAc,QAAA,UAGAd,EAAAc,QAAA,KAKA,KACA,IAAA+B,OACAR,QACArC,EAAAc,QAAA,MAEO,MAAAiC,IAOP,OAJA/C,EAAAc,SACAd,EAAAgD,eAGAhD,GAOAgD,aAAA,WACA,IAAAhD,EAAAH,MAAAI,EACAgD,EAAA,KAGA,IACAA,EAAA,oBAAAJ,MAAA,IAAAA,MAAA,KACO,MAAAK,GACP,OAAAlD,EAGA,IAAAiD,GAAA,mBAAAA,EAAAE,YACA,OAAAnD,EAGA,IAAAoD,EAAAH,EAAAE,YAAA,eAAuDT,QAAA,WAGvDW,EAAArD,EAAAU,YAAAV,EAAAU,WAAA4C,UAAAC,MAAA,kBACAC,EAAAH,GAAAI,SAAAJ,EAAA,GAAAK,MAAA,eAmBA,OAjBA1D,EAAAK,SACAsD,QAAAH,IAAAJ,GAAAH,EAAAE,YAAA,cAA6ET,QAAA,aAC7EkB,OAAAR,EACAS,OAAAZ,EAAAE,YAAA,4BAAiDT,QAAA,WACjDoB,MAAAb,EAAAE,YAAA,8BAAgDT,QAAA,WAChDqB,MAAAd,EAAAE,YAAA,8BAAgDT,QAAA,WAChDsB,MAAAf,EAAAE,YAAA,yBAAgDT,QAAA,WAChDuB,MAAAhB,EAAAE,YAAA,cAAgDT,QAAA,WAChDwB,MAAAjB,EAAAE,YAAA,gBAAkDT,QAAA,WAClDyB,OAAAlB,EAAAE,YAAA,iBAAmDF,EAAAE,YAAA,eAAuCF,EAAAE,YAAA,eAAuCT,QAAA,WACjI0B,OAAAnB,EAAAE,YAAA,iBAAmDF,EAAAE,YAAA,eAAuCF,EAAAE,YAAA,eAAuCT,QAAA,WACjI2B,OAAApB,EAAAE,YAAA,+BAAkDT,QAAA,WAClD4B,OAAArB,EAAAE,YAAA,+BAAkDT,QAAA,WAClD6B,QAAAtB,EAAAE,YAAA,4BAAkDT,QAAA,WAClD8B,QAAAvB,EAAAE,YAAA,kBAAqDF,EAAAE,YAAA,gBAAwCT,QAAA,YAG7F1C,GASAyE,aAAA,WACA,IAAAzE,EAAAH,MAAAI,EAGAyE,EAAA,oEAAAC,KAAA3E,EAAAU,YAAAV,EAAAU,WAAA4C,WACA,IAAAtD,EAAA4E,gBAAA5E,EAAAiB,KAAAyD,EAAA,CAIA1E,EAAA4E,eAAA,MACA5E,EAAAkB,WAAA,MAKAlB,EAAA6E,iBAAA,QAAA7E,EAAAiB,IAAA6D,aACA9E,EAAA6E,gBAAA,KACA7E,EAAAsC,UAKAtC,EAAA+E,eAAA/E,EAAAiB,IAAA+D,aAAA,WAKA,IAAAC,EAAA,SAAAlC,GAOA,QAAApB,EAAA,EAAqBA,EAAA3B,EAAAI,cAAsBuB,IAAA,CAC3C,IAAAuD,EAAA,IAAArC,MAIAqC,EAAAC,UAAA,KAGAnF,EAAAoF,mBAAAF,GAIA,IAAAvD,EAAA,EAAqBA,EAAA3B,EAAAM,OAAAsB,OAAsBD,IAC3C,IAAA3B,EAAAM,OAAAqB,GAAAE,UAKA,IAHA,IAAAC,EAAA9B,EAAAM,OAAAqB,GAAAI,eAGAC,EAAA,EAAyBA,EAAAF,EAAAF,OAAcI,IAAA,CACvC,IAAAC,EAAAjC,EAAAM,OAAAqB,GAAAO,WAAAJ,EAAAE,IAEAC,KAAAE,QAAAF,EAAAE,MAAAgD,YACAlD,EAAAE,MAAAgD,UAAA,KACAlD,EAAAE,MAAAkD,QAOArF,EAAAsF,cAGA,IAAAC,EAAAvF,EAAAiB,IAAAuE,qBACAD,EAAAE,OAAAzF,EAAA+E,eACAQ,EAAAG,QAAA1F,EAAAiB,IAAA0E,kBAGA,IAAAJ,EAAAK,MACAL,EAAAM,OAAA,GAEAN,EAAAK,MAAA,GAIA,mBAAA5F,EAAAiB,IAAA6E,QACA9F,EAAAiB,IAAA6E,SAIAP,EAAAQ,QAAA,WACAR,EAAAS,WAAA,GAGAhG,EAAA4E,eAAA,KAGAqB,SAAAC,oBAAA,aAAAjB,EAAA,MACAgB,SAAAC,oBAAA,WAAAjB,EAAA,MACAgB,SAAAC,oBAAA,QAAAjB,EAAA,MAGA,QAAAtD,EAAA,EAAuBA,EAAA3B,EAAAM,OAAAsB,OAAsBD,IAC7C3B,EAAAM,OAAAqB,GAAAwE,MAAA,YAUA,OAJAF,SAAAG,iBAAA,aAAAnB,EAAA,MACAgB,SAAAG,iBAAA,WAAAnB,EAAA,MACAgB,SAAAG,iBAAA,QAAAnB,EAAA,MAEAjF,IAQAqG,kBAAA,WACA,IAAArG,EAAAH,MAAAI,EAGA,GAAAD,EAAAG,gBAAAyB,OACA,OAAA5B,EAAAG,gBAAAmG,MAIA,IAAAC,GAAA,IAAA1D,OAAA2D,OAOA,OANAD,GAAA,oBAAAE,UAAAF,aAAAE,SAAA,mBAAAF,EAAAG,OACAH,EAAAI,MAAA,cAKA,IAAA9D,OAOAuC,mBAAA,SAAAwB,GACA,IAAA5G,EAAAH,MAAAI,EAOA,OAJA2G,EAAAzB,WACAnF,EAAAG,gBAAA0G,KAAAD,GAGA5G,GAQA4C,aAAA,WACA,IAAA5C,EAAAH,KAEA,GAAAG,EAAAgB,aAAAhB,EAAAiB,UAAA,IAAAjB,EAAAiB,IAAA6F,SAAA7G,EAAAc,cAAA,CAKA,QAAAY,EAAA,EAAmBA,EAAA3B,EAAAM,OAAAsB,OAAsBD,IACzC,GAAA3B,EAAAM,OAAAqB,GAAAE,UACA,QAAAG,EAAA,EAAuBA,EAAAhC,EAAAM,OAAAqB,GAAAoF,QAAAnF,OAAiCI,IACxD,IAAAhC,EAAAM,OAAAqB,GAAAoF,QAAA/E,GAAAgF,QACA,OAAAhH,EA4BA,OAtBAA,EAAAiH,eACAC,aAAAlH,EAAAiH,eAIAjH,EAAAiH,cAAAE,WAAA,WACAnH,EAAAgB,cAIAhB,EAAAiH,cAAA,KACAjH,EAAA2C,MAAA,aACA3C,EAAAiB,IAAA6F,UAAAJ,KAAA,WACA1G,EAAA2C,MAAA,YAEA3C,EAAAoH,6BACApH,EAAAoH,oBACApH,EAAAsF,mBAGO,KAEPtF,IAOAsF,YAAA,WACA,IAAAtF,EAAAH,KAEA,GAAAG,EAAAiB,UAAA,IAAAjB,EAAAiB,IAAA6E,QAAA7F,EAAAc,cAyBA,MArBA,YAAAf,EAAA2C,OAAA3C,EAAAiH,eACAC,aAAAlH,EAAAiH,eACAjH,EAAAiH,cAAA,MACO,cAAAjH,EAAA2C,OACP3C,EAAAiB,IAAA6E,SAAAY,KAAA,WACA1G,EAAA2C,MAAA,UAGA,QAAAhB,EAAA,EAAuBA,EAAA3B,EAAAM,OAAAsB,OAAsBD,IAC7C3B,EAAAM,OAAAqB,GAAAwE,MAAA,YAIAnG,EAAAiH,gBACAC,aAAAlH,EAAAiH,eACAjH,EAAAiH,cAAA,OAEO,eAAAjH,EAAA2C,QACP3C,EAAAoH,oBAAA,MAGApH,IAKA,IAAAC,EAAA,IAAAL,EASAyH,EAAA,SAAAC,GAIAA,EAAAC,KAAA,IAAAD,EAAAC,IAAA3F,QAHA/B,KAQAC,KAAAwH,IAEAD,EAAAtH,WAMAD,KAAA,SAAAwH,GACA,IAAAtH,EAAAH,KAuEA,OApEAI,EAAAgB,KACAM,IAIAvB,EAAAwH,UAAAF,EAAAG,UAAA,MACAzH,EAAA0H,QAAA,iBAAAJ,EAAAK,OAAAL,EAAAK,QAAAL,EAAAK,QACA3H,EAAA4H,OAAAN,EAAAO,OAAA,MACA7H,EAAAO,OAAA+G,EAAAlF,MAAA,MACApC,EAAA8H,MAAAR,EAAAS,MAAA,MACA/H,EAAAgI,MAAAV,EAAAW,MAAA,EACAjI,EAAAkI,SAAA,kBAAAZ,EAAAa,SAAAb,EAAAa,QACAnI,EAAAoI,MAAAd,EAAAe,MAAA,EACArI,EAAAsI,QAAAhB,EAAAiB,WACAvI,EAAAwI,KAAA,iBAAAlB,EAAAC,IAAAD,EAAAC,KAAAD,EAAAC,KACAvH,EAAAQ,aAAAiI,IAAAnB,EAAAlG,OAAAkG,EAAAlG,OAAA,EACApB,EAAA0I,oBAAApB,EAAAqB,oBAAA,MAGA3I,EAAA4I,UAAA,EACA5I,EAAA6I,OAAA,WACA7I,EAAA+G,WACA/G,EAAA8I,cACA9I,EAAA+I,UACA/I,EAAAgJ,UAAA,MAGAhJ,EAAAiJ,OAAA3B,EAAA4B,QAAgCC,GAAA7B,EAAA4B,WAChClJ,EAAAoJ,QAAA9B,EAAA+B,SAAkCF,GAAA7B,EAAA+B,YAClCrJ,EAAAsJ,QAAAhC,EAAAiC,SAAkCJ,GAAA7B,EAAAiC,YAClCvJ,EAAAwJ,aAAAlC,EAAAmC,cAA4CN,GAAA7B,EAAAmC,iBAC5CzJ,EAAA0J,aAAApC,EAAAqC,cAA4CR,GAAA7B,EAAAqC,iBAC5C3J,EAAA4J,SAAAtC,EAAAuC,UAAoCV,GAAA7B,EAAAuC,aACpC7J,EAAA8J,QAAAxC,EAAAyC,SAAkCZ,GAAA7B,EAAAyC,YAClC/J,EAAAgK,QAAA1C,EAAA2C,SAAkCd,GAAA7B,EAAA2C,YAClCjK,EAAAkK,QAAA5C,EAAA6C,SAAkChB,GAAA7B,EAAA6C,YAClCnK,EAAAoK,UAAA9C,EAAA+C,WAAsClB,GAAA7B,EAAA+C,cACtCrK,EAAAsK,QAAAhD,EAAAiD,SAAkCpB,GAAA7B,EAAAiD,YAClCvK,EAAAwK,QAAAlD,EAAAmD,SAAkCtB,GAAA7B,EAAAmD,YAClCzK,EAAA0K,UAAApD,EAAAqD,WAAsCxB,GAAA7B,EAAAqD,cACtC3K,EAAA4K,aAGA5K,EAAA6B,UAAA5B,EAAAc,gBAAAf,EAAA4H,YAGA,IAAA3H,EAAAgB,KAAAhB,EAAAgB,KAAAhB,EAAAiB,YACAjB,EAAAwE,eAIAxE,EAAAK,OAAAuG,KAAA7G,GAGAA,EAAAwH,WACAxH,EAAA+I,OAAAlC,MACAgE,MAAA,OACAC,OAAA,WACA9K,EAAAwG,UAMAxG,EAAAkI,UACAlI,EAAAqF,OAGArF,GAOAqF,KAAA,WACA,IACA0F,EAAA,KAGA,GAAA9K,EAAAa,QAJAjB,KAKAsG,MAAA,0CADA,CAMA,iBAVAtG,KAUA2I,OAVA3I,KAWA2I,MAXA3I,KAWA2I,OAIA,QAAA7G,EAAA,EAAmBA,EAfnB9B,KAemB2I,KAAA5G,OAAoBD,IAAA,CACvC,IAAAc,EAAAuI,EAEA,GAlBAnL,KAkBA6H,SAlBA7H,KAkBA6H,QAAA/F,GAEAc,EApBA5C,KAoBA6H,QAAA/F,OACS,CAGT,oBADAqJ,EAvBAnL,KAuBA2I,KAAA7G,IACA,CAxBA9B,KAyBAsG,MAAA,2EACA,UAIA1D,EAAA,0BAAuCwI,KAAAD,MAEvCvI,EAAA,aAAAwI,KAAAD,EAAAtH,MAAA,YAGAjB,IACAA,IAAA,GAAAyI,eAUA,GAAAzI,GAAAxC,EAAAuC,OAAAC,GAAA,CACAsI,EA/CAlL,KA+CA2I,KAAA7G,GACA,OAIA,GAAAoJ,EAuBA,OA3EAlL,KAyDA2I,KAAAuC,EAzDAlL,KA0DAgJ,OAAA,UAIA,WAAAlI,OAAAwK,SAAAC,UAAA,UAAAL,EAAAM,MAAA,OA9DAxL,KA+DA+H,OAAA,KA/DA/H,KAgEAgC,UAAA,OAIA,IAAAyJ,EApEAzL,WAuEAgC,WACA0J,EAxEA1L,gBAqDAsG,MAAA,mEA+BAK,KAAA,SAAA+B,EAAAiD,GACA,IAAAxL,EAAAH,KACA4L,EAAA,KAGA,oBAAAlD,EACAkD,EAAAlD,EACAA,EAAA,SACO,qBAAAA,GAAA,WAAAvI,EAAA6I,SAAA7I,EAAAsI,QAAAC,GAEP,YACO,YAAAA,IAEPA,EAAA,aAIAvI,EAAAgJ,WAAA,CAEA,IADA,IAAA0C,EAAA,EACA/J,EAAA,EAAuBA,EAAA3B,EAAA+G,QAAAnF,OAAuBD,IAC9C3B,EAAA+G,QAAApF,GAAAqF,UAAAhH,EAAA+G,QAAApF,GAAAgK,SACAD,IACAD,EAAAzL,EAAA+G,QAAApF,GAAAiK,KAIA,IAAAF,EACAnD,EAAA,KAEAkD,EAAA,MAMA,IAAAxJ,EAAAwJ,EAAAzL,EAAAkC,WAAAuJ,GAAAzL,EAAA6L,iBAGA,IAAA5J,EACA,YAWA,GAPAwJ,IAAAlD,IACAA,EAAAtG,EAAAqG,SAAA,aAMA,WAAAtI,EAAA6I,OAAA,CAEA5G,EAAAqG,QAAAC,EAGAtG,EAAA0J,OAAA,MAGA,IAAAG,EAAA7J,EAAA2J,IAQA,OAPA5L,EAAA+I,OAAAlC,MACAgE,MAAA,OACAC,OAAA,WACA9K,EAAAwG,KAAAsF,MAIAA,EAIA,GAAAL,IAAAxJ,EAAA+E,QAMA,OAJAwE,GACAxL,EAAA+L,WAAA,QAGA9J,EAAA2J,IAIA5L,EAAA6B,WACA5B,EAAAqF,cAIA,IAAA0G,EAAAC,KAAAC,IAAA,EAAAjK,EAAAkK,MAAA,EAAAlK,EAAAkK,MAAAnM,EAAAsI,QAAAC,GAAA,QACA6D,EAAAH,KAAAC,IAAA,GAAAlM,EAAAsI,QAAAC,GAAA,GAAAvI,EAAAsI,QAAAC,GAAA,QAAAyD,GACAK,EAAA,IAAAD,EAAAH,KAAAK,IAAArK,EAAAmG,OACAxC,EAAA5F,EAAAsI,QAAAC,GAAA,OACAgE,GAAAvM,EAAAsI,QAAAC,GAAA,GAAAvI,EAAAsI,QAAAC,GAAA,QACAR,KAAA9F,EAAA6F,OAAA9H,EAAAsI,QAAAC,GAAA,IACAtG,EAAAqG,QAAAC,EAIAtG,EAAA0J,OAAA,MAGA,IAAAa,EAAA,WACAvK,EAAA+E,QAAA,MACA/E,EAAAkK,MAAAH,EACA/J,EAAAwK,OAAA7G,EACA3D,EAAAyK,MAAAH,EACAtK,EAAA6F,MAAAC,GAIA,KAAAiE,GAAAO,GAAA,CAMA,IAAAI,EAAA1K,EAAAE,MACA,GAAAnC,EAAA6B,UAAA,CAEA,IAAA+K,EAAA,WACA5M,EAAAgJ,UAAA,MACAwD,IACAxM,EAAA6M,eAAA5K,GAGA,IAAAZ,EAAAY,EAAA1B,QAAAP,EAAAO,OAAA,EAAA0B,EAAAzB,QACAmM,EAAAnL,KAAAC,eAAAJ,EAAApB,EAAAgB,IAAAS,aACAO,EAAA6K,WAAA7M,EAAAgB,IAAAS,iBAGA,IAAAiL,EAAAI,aAAAnH,MACA3D,EAAA6F,MAAA6E,EAAAI,aAAAC,YAAA,EAAAhB,EAAA,OAAAW,EAAAI,aAAAC,YAAA,EAAAhB,EAAAI,GAEAnK,EAAA6F,MAAA6E,EAAAI,aAAAnH,MAAA,EAAAoG,EAAA,OAAAW,EAAAI,aAAAnH,MAAA,EAAAoG,EAAAI,GAIAC,IAAAY,MACAjN,EAAA8I,WAAA7G,EAAA2J,KAAAzE,WAAAnH,EAAA2L,OAAAuB,KAAAlN,EAAAiC,GAAAoK,IAGAb,GACArE,WAAA,WACAnH,EAAAmG,MAAA,OAAAlE,EAAA2J,KACA5L,EAAA+L,cACa,IAIb,YAAA9L,EAAA0C,MACAiK,KAEA5M,EAAAgJ,UAAA,KAGAhJ,EAAAmN,KAAA,SAAAP,GAGA5M,EAAAoN,YAAAnL,EAAA2J,UAEO,CAEP,IAAAyB,EAAA,WACAV,EAAAjL,YAAAsK,EACAW,EAAAtK,MAAAJ,EAAA1B,QAAAP,EAAAO,QAAAN,EAAAM,QAAAoM,EAAAtK,MACAsK,EAAAvL,OAAAa,EAAAzB,QAAAP,EAAAmB,SACAuL,EAAAW,aAAArL,EAAAmG,MAGA,IACA,IAAA5B,EAAAmG,EAAAnG,OAwCA,GArCAA,GAAA,oBAAAC,UAAAD,aAAAC,SAAA,mBAAAD,EAAAE,OAEA1G,EAAAgJ,UAAA,KAGAwD,IAGAhG,EACAE,KAAA,WACA1G,EAAAgJ,UAAA,MACA2D,EAAAxH,UAAA,KACAqG,IACAxL,EAAAmG,MAAA,OAAAlE,EAAA2J,KACA5L,EAAA+L,gBAGApF,MAAA,WACA3G,EAAAgJ,UAAA,MACAhJ,EAAAmG,MAAA,YAAAlE,EAAA2J,IAAA,+IAIA3J,EAAA0J,OAAA,KACA1J,EAAA+E,QAAA,QAEawE,IACbxL,EAAAgJ,UAAA,MACAwD,IACAxM,EAAAmG,MAAA,OAAAlE,EAAA2J,KACA5L,EAAA+L,cAIAY,EAAAW,aAAArL,EAAAmG,MAGAuE,EAAAY,OAGA,YAFAvN,EAAAmG,MAAA,YAAAlE,EAAA2J,IAAA,+IAMA,cAAArD,GAAAtG,EAAA6F,MACA9H,EAAA8I,WAAA7G,EAAA2J,KAAAzE,WAAAnH,EAAA2L,OAAAuB,KAAAlN,EAAAiC,GAAAoK,IAEArM,EAAA8I,WAAA7G,EAAA2J,KAAA,WAEA5L,EAAA2L,OAAA1J,GAGA0K,EAAAzG,oBAAA,QAAAlG,EAAA8I,WAAA7G,EAAA2J,KAAA,QAEAe,EAAAvG,iBAAA,QAAApG,EAAA8I,WAAA7G,EAAA2J,KAAA,QAEW,MAAA1I,GACXlD,EAAAmG,MAAA,YAAAlE,EAAA2J,IAAA1I,KAKAsK,EAAA7M,eAAA8M,SAAAd,EAAAe,YAAAzN,EAAAS,WAAAiN,WACA,GAAAhB,EAAAe,YAAA,GAAAF,EACAH,QACS,CACTrN,EAAAgJ,UAAA,KAEA,IAAA4E,EAAA,WAEAP,IAGAV,EAAAzG,oBAAAjG,EAAAQ,cAAAmN,EAAA,QAEAjB,EAAAvG,iBAAAnG,EAAAQ,cAAAmN,EAAA,OAGA5N,EAAAoN,YAAAnL,EAAA2J,MAIA,OAAA3J,EAAA2J,IAhJA5L,EAAA2L,OAAA1J,IAwJA4L,MAAA,SAAApC,GACA,IAAAzL,EAAAH,KAGA,cAAAG,EAAA6I,QAAA7I,EAAAgJ,UAQA,OAPAhJ,EAAA+I,OAAAlC,MACAgE,MAAA,QACAC,OAAA,WACA9K,EAAA6N,MAAApC,MAIAzL,EAMA,IAFA,IAAA8B,EAAA9B,EAAA+B,aAAA0J,GAEA9J,EAAA,EAAmBA,EAAAG,EAAAF,OAAcD,IAAA,CAEjC3B,EAAAoN,YAAAtL,EAAAH,IAGA,IAAAM,EAAAjC,EAAAkC,WAAAJ,EAAAH,IAEA,GAAAM,MAAA+E,UAEA/E,EAAAkK,MAAAnM,EAAAgM,KAAAlK,EAAAH,IACAM,EAAA6L,UAAA,EACA7L,EAAA+E,QAAA,KAGAhH,EAAA+N,UAAAjM,EAAAH,IAEAM,EAAAE,OACA,GAAAnC,EAAA6B,UAAA,CAEA,IAAAI,EAAAE,MAAA4K,aACA,cAGA,IAAA9K,EAAAE,MAAA4K,aAAAR,KACAtK,EAAAE,MAAA4K,aAAAiB,QAAA,GAEA/L,EAAAE,MAAA4K,aAAAR,KAAA,GAIAvM,EAAAiO,aAAAhM,EAAAE,YACa+L,MAAAjM,EAAAE,MAAAiK,WAAAnK,EAAAE,MAAAiK,WAAAa,KACbhL,EAAAE,MAAA0L,QAMAM,UAAA,IACAnO,EAAAmG,MAAA,QAAAlE,IAAA2J,IAAA,MAIA,OAAA5L,GASAuM,KAAA,SAAAd,EAAAD,GACA,IAAAxL,EAAAH,KAGA,cAAAG,EAAA6I,QAAA7I,EAAAgJ,UAQA,OAPAhJ,EAAA+I,OAAAlC,MACAgE,MAAA,OACAC,OAAA,WACA9K,EAAAuM,KAAAd,MAIAzL,EAMA,IAFA,IAAA8B,EAAA9B,EAAA+B,aAAA0J,GAEA9J,EAAA,EAAmBA,EAAAG,EAAAF,OAAcD,IAAA,CAEjC3B,EAAAoN,YAAAtL,EAAAH,IAGA,IAAAM,EAAAjC,EAAAkC,WAAAJ,EAAAH,IAEAM,IAEAA,EAAAkK,MAAAlK,EAAAwK,QAAA,EACAxK,EAAA6L,UAAA,EACA7L,EAAA+E,QAAA,KACA/E,EAAA0J,OAAA,KAGA3L,EAAA+N,UAAAjM,EAAAH,IAEAM,EAAAE,QACAnC,EAAA6B,UAEAI,EAAAE,MAAA4K,oBACA,IAAA9K,EAAAE,MAAA4K,aAAAR,KACAtK,EAAAE,MAAA4K,aAAAiB,QAAA,GAEA/L,EAAAE,MAAA4K,aAAAR,KAAA,GAIAvM,EAAAiO,aAAAhM,EAAAE,QAEa+L,MAAAjM,EAAAE,MAAAiK,WAAAnK,EAAAE,MAAAiK,WAAAa,MACbhL,EAAAE,MAAAT,YAAAO,EAAAwK,QAAA,EACAxK,EAAAE,MAAA0L,UAIArC,GACAxL,EAAAmG,MAAA,OAAAlE,EAAA2J,MAKA,OAAA5L,GASAoC,KAAA,SAAAC,EAAAoJ,GACA,IAAAzL,EAAAH,KAGA,cAAAG,EAAA6I,QAAA7I,EAAAgJ,UAQA,OAPAhJ,EAAA+I,OAAAlC,MACAgE,MAAA,OACAC,OAAA,WACA9K,EAAAoC,KAAAC,EAAAoJ,MAIAzL,EAIA,YAAAyL,EAAA,CACA,qBAAApJ,EAGA,OAAArC,EAAAO,OAFAP,EAAAO,OAAA8B,EASA,IAFA,IAAAP,EAAA9B,EAAA+B,aAAA0J,GAEA9J,EAAA,EAAmBA,EAAAG,EAAAF,OAAcD,IAAA,CAEjC,IAAAM,EAAAjC,EAAAkC,WAAAJ,EAAAH,IAEAM,IACAA,EAAA1B,OAAA8B,EAGAJ,EAAAmM,WACApO,EAAA+N,UAAA9L,EAAA2J,KAGA5L,EAAA6B,WAAAI,EAAAE,MACAF,EAAAE,MAAAX,KAAAC,eAAAY,EAAA,EAAAJ,EAAAzB,QAAAP,EAAAgB,IAAAS,aACWO,EAAAE,QACXF,EAAAE,MAAAE,QAAApC,EAAAM,QAAA8B,GAGArC,EAAAmG,MAAA,OAAAlE,EAAA2J,MAIA,OAAA5L,GAWAoB,OAAA,WACA,IAEAC,EAAAoK,EAqBAxJ,EAvBAjC,EAAAH,KACAwO,EAAAF,UAIA,OAAAE,EAAAzM,OAEA,OAAA5B,EAAAQ,QAiBA,GAhBO,IAAA6N,EAAAzM,QAAA,IAAAyM,EAAAzM,aAAA,IAAAyM,EAAA,GAEPrO,EAAA+B,eACAuM,QAAAD,EAAA,KACA,EACA5C,EAAAhI,SAAA4K,EAAA,OAEAhN,EAAAC,WAAA+M,EAAA,IAEOA,EAAAzM,QAAA,IACPP,EAAAC,WAAA+M,EAAA,IACA5C,EAAAhI,SAAA4K,EAAA,eAKA,IAAAhN,MAAA,GAAAA,GAAA,GA2CA,OADAY,EAAAwJ,EAAAzL,EAAAkC,WAAAuJ,GAAAzL,EAAA+G,QAAA,IACA9E,EAAAzB,QAAA,EAzCA,cAAAR,EAAA6I,QAAA7I,EAAAgJ,UAQA,OAPAhJ,EAAA+I,OAAAlC,MACAgE,MAAA,SACAC,OAAA,WACA9K,EAAAoB,OAAAmN,MAAAvO,EAAAqO,MAIArO,OAIA,IAAAyL,IACAzL,EAAAQ,QAAAa,GAIAoK,EAAAzL,EAAA+B,aAAA0J,GACA,QAAA9J,EAAA,EAAqBA,EAAA8J,EAAA7J,OAAaD,KAElCM,EAAAjC,EAAAkC,WAAAuJ,EAAA9J,OAGAM,EAAAzB,QAAAa,EAGAgN,EAAA,IACArO,EAAA+N,UAAAtC,EAAA9J,IAGA3B,EAAA6B,WAAAI,EAAAE,QAAAF,EAAA1B,OACA0B,EAAAE,MAAAX,KAAAC,eAAAJ,EAAApB,EAAAgB,IAAAS,aACaO,EAAAE,QAAAF,EAAA1B,SACb0B,EAAAE,MAAAf,OAAAC,EAAApB,EAAAmB,UAGApB,EAAAmG,MAAA,SAAAlE,EAAA2J,MAQA,OAAA5L,GAWAwO,KAAA,SAAAC,EAAAC,EAAAC,EAAAlD,GACA,IAAAzL,EAAAH,KAGA,cAAAG,EAAA6I,QAAA7I,EAAAgJ,UAQA,OAPAhJ,EAAA+I,OAAAlC,MACAgE,MAAA,OACAC,OAAA,WACA9K,EAAAwO,KAAAC,EAAAC,EAAAC,EAAAlD,MAIAzL,EAIAyO,EAAAnN,WAAAmN,GACAC,EAAApN,WAAAoN,GACAC,EAAArN,WAAAqN,GAGA3O,EAAAoB,OAAAqN,EAAAhD,GAIA,IADA,IAAA3J,EAAA9B,EAAA+B,aAAA0J,GACA9J,EAAA,EAAmBA,EAAAG,EAAAF,OAAcD,IAAA,CAEjC,IAAAM,EAAAjC,EAAAkC,WAAAJ,EAAAH,IAGA,GAAAM,EAAA,CAOA,GALAwJ,GACAzL,EAAA+N,UAAAjM,EAAAH,IAIA3B,EAAA6B,YAAAI,EAAA1B,OAAA,CACA,IAAAmB,EAAAzB,EAAAgB,IAAAS,YACAkN,EAAAlN,EAAAiN,EAAA,IACA1M,EAAAzB,QAAAiO,EACAxM,EAAAE,MAAAX,KAAAC,eAAAgN,EAAA/M,GACAO,EAAAE,MAAAX,KAAAqN,wBAAAH,EAAAE,GAGA5O,EAAA8O,mBAAA7M,EAAAwM,EAAAC,EAAAC,EAAA7M,EAAAH,QAAA,IAAA8J,IAIA,OAAAzL,GAYA8O,mBAAA,SAAA7M,EAAAwM,EAAAC,EAAAC,EAAAlD,EAAAsD,GACA,IAAA/O,EAAAH,KACAwB,EAAAoN,EACAO,EAAAN,EAAAD,EACAQ,EAAAhD,KAAAK,IAAA0C,EAAA,KACAE,EAAAjD,KAAAC,IAAA,EAAA+C,EAAA,EAAAN,EAAAM,EAAAN,GACAQ,EAAAC,KAAAC,MAGApN,EAAAqN,QAAAZ,EAGAzM,EAAAmM,UAAAmB,YAAA,WAEA,IAAAC,GAAAJ,KAAAC,MAAAF,GAAAR,EACAQ,EAAAC,KAAAC,MACAhO,GAAA2N,EAAAQ,EAGAnO,EAAA4K,KAAAC,IAAA,EAAA7K,GACAA,EAAA4K,KAAAwD,IAAA,EAAApO,GAGAA,EAAA4K,KAAAyD,MAAA,IAAArO,GAAA,IAGArB,EAAA6B,UACAI,EAAAzB,QAAAa,EAEArB,EAAAoB,OAAAC,EAAAY,EAAA2J,IAAA,MAIAmD,IACA/O,EAAAQ,QAAAa,IAIAqN,EAAAD,GAAApN,GAAAqN,KAAAD,GAAApN,GAAAqN,KACAiB,cAAA1N,EAAAmM,WACAnM,EAAAmM,UAAA,KACAnM,EAAAqN,QAAA,KACAtP,EAAAoB,OAAAsN,EAAAzM,EAAA2J,KACA5L,EAAAmG,MAAA,OAAAlE,EAAA2J,OAEOsD,IASPnB,UAAA,SAAAtC,GACA,IACAxJ,EADApC,KACAqC,WAAAuJ,GAcA,OAZAxJ,KAAAmM,YAHAvO,KAIAgC,WACAI,EAAAE,MAAAX,KAAAoO,sBAAA3P,EAAAgB,IAAAS,aAGAiO,cAAA1N,EAAAmM,WACAnM,EAAAmM,UAAA,KATAvO,KAUAuB,OAAAa,EAAAqN,QAAA7D,GACAxJ,EAAAqN,QAAA,KAXAzP,KAYAsG,MAAA,OAAAsF,IAZA5L,MA0BAkI,KAAA,WACA,IAEAA,EAAA0D,EAAAxJ,EADAoM,EAAAF,UAIA,OAAAE,EAAAzM,OAEA,OAPA/B,KAOAiI,MACO,OAAAuG,EAAAzM,OAAA,CACP,qBAAAyM,EAAA,GAMA,SADApM,EAdApC,KAcAqC,WAAAuB,SAAA4K,EAAA,UACApM,EAAA6F,MALAC,EAAAsG,EAAA,GAVAxO,KAWAiI,MAAAC,OAMO,IAAAsG,EAAAzM,SACPmG,EAAAsG,EAAA,GACA5C,EAAAhI,SAAA4K,EAAA,QAKA,IADA,IAAAvM,EAvBAjC,KAuBAkC,aAAA0J,GACA9J,EAAA,EAAmBA,EAAAG,EAAAF,OAAcD,KACjCM,EAzBApC,KAyBAqC,WAAAJ,EAAAH,OAGAM,EAAA6F,MAAAC,EA5BAlI,KA6BAgC,WAAAI,EAAAE,OAAAF,EAAAE,MAAA4K,eACA9K,EAAAE,MAAA4K,aAAAhF,OACAA,IACA9F,EAAAE,MAAA4K,aAAA8C,UAAA5N,EAAAwK,QAAA,EACAxK,EAAAE,MAAA4K,aAAA+C,QAAA7N,EAAAyK,SAMA,OAvCA7M,MAkDAwI,KAAA,WACA,IAEAA,EAAAoD,EAqBAxJ,EAvBAjC,EAAAH,KACAwO,EAAAF,UAIA,OAAAE,EAAAzM,OAEA6J,EAAAzL,EAAA+G,QAAA,GAAA6E,SACO,OAAAyC,EAAAzM,OAAA,CAEP5B,EAAA+B,eACAuM,QAAAD,EAAA,KACA,EACA5C,EAAAhI,SAAA4K,EAAA,OAEAhG,EAAA/G,WAAA+M,EAAA,SAEO,IAAAA,EAAAzM,SACPyG,EAAA/G,WAAA+M,EAAA,IACA5C,EAAAhI,SAAA4K,EAAA,QAKA,oBAAAhG,EAwDA,OADApG,EAAAjC,EAAAkC,WAAAuJ,IACAxJ,EAAAmG,MAAApI,EAAAoI,MAtDA,cAAApI,EAAA6I,QAAA7I,EAAAgJ,UAQA,OAPAhJ,EAAA+I,OAAAlC,MACAgE,MAAA,OACAC,OAAA,WACA9K,EAAAqI,KAAAkG,MAAAvO,EAAAqO,MAIArO,OAIA,IAAAyL,IACAzL,EAAAoI,MAAAC,GAIAoD,EAAAzL,EAAA+B,aAAA0J,GACA,QAAA9J,EAAA,EAAqBA,EAAA8J,EAAA7J,OAAaD,IAIlC,GAFAM,EAAAjC,EAAAkC,WAAAuJ,EAAA9J,IAEA,CAGA3B,EAAA+P,QAAAtE,EAAA9J,MACAM,EAAA6L,UAAA9N,EAAAgM,KAAAP,EAAA9J,IACAM,EAAA6K,WAAA9M,EAAA6B,UAAA5B,EAAAgB,IAAAS,YAAAO,EAAA6K,YAEA7K,EAAAmG,MAAAC,EAGArI,EAAA6B,WAAAI,EAAAE,OAAAF,EAAAE,MAAA4K,aACA9K,EAAAE,MAAA4K,aAAAO,aAAA7L,eAAA4G,EAAApI,EAAAgB,IAAAS,aACaO,EAAAE,QACbF,EAAAE,MAAAmL,aAAAjF,GAIA,IAAA2D,EAAAhM,EAAAgM,KAAAP,EAAA9J,IAEA0K,EAAA,MADArM,EAAAsI,QAAArG,EAAAqG,SAAA,GAAAtI,EAAAsI,QAAArG,EAAAqG,SAAA,QAAA0D,GACAC,KAAAK,IAAArK,EAAAmG,QAGApI,EAAA8I,WAAA2C,EAAA9J,KAAAM,EAAA+E,UACAhH,EAAAoN,YAAA3B,EAAA9J,IACA3B,EAAA8I,WAAA2C,EAAA9J,IAAAwF,WAAAnH,EAAA2L,OAAAuB,KAAAlN,EAAAiC,GAAAoK,IAGArM,EAAAmG,MAAA,OAAAlE,EAAA2J,KAQA,OAAA5L,GAWAgM,KAAA,WACA,IAEAA,EAAAP,EAFAzL,EAAAH,KACAwO,EAAAF,UAIA,OAAAE,EAAAzM,OAEA6J,EAAAzL,EAAA+G,QAAA,GAAA6E,SACO,OAAAyC,EAAAzM,OAAA,CAEP5B,EAAA+B,eACAuM,QAAAD,EAAA,KACA,EACA5C,EAAAhI,SAAA4K,EAAA,OACSrO,EAAA+G,QAAAnF,SACT6J,EAAAzL,EAAA+G,QAAA,GAAA6E,IACAI,EAAA1K,WAAA+M,EAAA,UAEO,IAAAA,EAAAzM,SACPoK,EAAA1K,WAAA+M,EAAA,IACA5C,EAAAhI,SAAA4K,EAAA,QAIA,YAAA5C,EACA,OAAAzL,EAIA,cAAAA,EAAA6I,QAAA7I,EAAAgJ,UAQA,OAPAhJ,EAAA+I,OAAAlC,MACAgE,MAAA,OACAC,OAAA,WACA9K,EAAAgM,KAAAuC,MAAAvO,EAAAqO,MAIArO,EAIA,IAAAiC,EAAAjC,EAAAkC,WAAAuJ,GAEA,GAAAxJ,EAAA,CACA,sBAAA+J,MAAA,GAwCS,CACT,GAAAhM,EAAA6B,UAAA,CACA,IAAAmO,EAAAhQ,EAAA+P,QAAAtE,GAAAxL,EAAAgB,IAAAS,YAAAO,EAAA6K,WAAA,EACAmD,EAAAhO,EAAA6L,UAAA7L,EAAA6L,UAAA7L,EAAAkK,MAAA,EACA,OAAAlK,EAAAkK,OAAA8D,EAAAD,EAAA/D,KAAAK,IAAArK,EAAAmG,QAEA,OAAAnG,EAAAE,MAAAT,YA5CA,IAAAqO,EAAA/P,EAAA+P,QAAAtE,GACAsE,GACA/P,EAAA6N,MAAApC,EAAA,MAIAxJ,EAAAkK,MAAAH,EACA/J,EAAA0J,OAAA,MACA3L,EAAAoN,YAAA3B,GAGAzL,EAAA6B,YAAAI,EAAAE,OAAA+L,MAAAjM,EAAAE,MAAAiK,YACAnK,EAAAE,MAAAT,YAAAsK,GAIA,IAAAkE,EAAA,WACAlQ,EAAAmG,MAAA,OAAAsF,GAGAsE,GACA/P,EAAAwG,KAAAiF,EAAA,OAKA,GAAAsE,IAAA/P,EAAA6B,UAAA,CACA,IAAAsO,EAAA,WACAnQ,EAAAgJ,UAGA7B,WAAAgJ,EAAA,GAFAD,KAKA/I,WAAAgJ,EAAA,QAEAD,IAaA,OAAAlQ,GAQA+P,QAAA,SAAAtE,GAIA,oBAAAA,EAAA,CACA,IAAAxJ,EAJApC,KAIAqC,WAAAuJ,GACA,QAAAxJ,MAAA+E,QAIA,QAAArF,EAAA,EAAmBA,EATnB9B,KASmBkH,QAAAnF,OAAuBD,IAC1C,IAVA9B,KAUAkH,QAAApF,GAAAqF,QACA,YAIA,cAQAoF,SAAA,SAAAX,GACA,IACAW,EADAvM,KACA+I,UAGA3G,EAJApC,KAIAqC,WAAAuJ,GAKA,OAJAxJ,IACAmK,EANAvM,KAMAyI,QAAArG,EAAAqG,SAAA,QAGA8D,GAOAzJ,MAAA,WACA,OAAA9C,KAAAgJ,QAOAvG,OAAA,WAKA,IAJA,IAAAtC,EAAAH,KAGAuQ,EAAApQ,EAAA+G,QACApF,EAAA,EAAmBA,EAAAyO,EAAAxO,OAAiBD,IAAA,CAOpC,GALAyO,EAAAzO,GAAAqF,SACAhH,EAAAuM,KAAA6D,EAAAzO,GAAAiK,MAIA5L,EAAA6B,UAEA,kBAAA8C,KAAA1E,EAAAS,YAAAT,EAAAS,WAAA4C,aAEA8M,EAAAzO,GAAAQ,MAAAoF,IAAA,0FAIA6I,EAAAzO,GAAAQ,MAAA+D,oBAAA,QAAAkK,EAAAzO,GAAA0O,SAAA,OACAD,EAAAzO,GAAAQ,MAAA+D,oBAAAjG,EAAAQ,cAAA2P,EAAAzO,GAAA2O,QAAA,OAGArQ,EAAAmF,mBAAAgL,EAAAzO,GAAAQ,cAIAiO,EAAAzO,GAAAQ,MAGAnC,EAAAoN,YAAAgD,EAAAzO,GAAAiK,KAIA,IAAA2E,EAAAtQ,EAAAK,OAAAgO,QAAAtO,GACAuQ,GAAA,GACAtQ,EAAAK,OAAAkQ,OAAAD,EAAA,GAIA,IAAAE,EAAA,KACA,IAAA9O,EAAA,EAAeA,EAAA1B,EAAAK,OAAAsB,OAAwBD,IACvC,GAAA1B,EAAAK,OAAAqB,GAAA6G,OAAAxI,EAAAwI,MAAAxI,EAAAwI,KAAA8F,QAAArO,EAAAK,OAAAqB,GAAA6G,OAAA,GACAiI,EAAA,MACA,MAgBA,OAZAC,GAAAD,UACAC,EAAA1Q,EAAAwI,MAIAvI,EAAAa,QAAA,MAGAd,EAAA6I,OAAA,WACA7I,EAAA+G,WACA/G,EAAA,KAEA,MAWA2Q,GAAA,SAAA9F,EAAA1B,EAAAsC,EAAA0B,GACA,IACAyD,EADA/Q,KACA,MAAAgL,GAMA,MAJA,mBAAA1B,GACAyH,EAAA/J,KAAAsG,GAA4B1B,KAAAtC,KAAAgE,SAA+B1B,KAAAtC,OAJ3DtJ,MAiBAgR,IAAA,SAAAhG,EAAA1B,EAAAsC,GACA,IACAmF,EADA/Q,KACA,MAAAgL,GACAlJ,EAAA,EAQA,GALA,iBAAAwH,IACAsC,EAAAtC,EACAA,EAAA,MAGAA,GAAAsC,EAEA,IAAA9J,EAAA,EAAiBA,EAAAiP,EAAAhP,OAAiBD,IAAA,CAClC,IAAAmP,EAAArF,IAAAmF,EAAAjP,GAAA8J,GACA,GAAAtC,IAAAyH,EAAAjP,GAAAwH,IAAA2H,IAAA3H,GAAA2H,EAAA,CACAF,EAAAJ,OAAA7O,EAAA,GACA,YAGO,GAAAkJ,EAnBPhL,KAqBA,MAAAgL,UACO,CAEP,IAAAkG,EAAAC,OAAAD,KAxBAlR,MAyBA,IAAA8B,EAAA,EAAiBA,EAAAoP,EAAAnP,OAAeD,IAChC,IAAAoP,EAAApP,GAAA2M,QAAA,QAAA2C,MAAAC,QA1BArR,KA0BAkR,EAAApP,OA1BA9B,KA2BAkR,EAAApP,QAKA,OAhCA9B,MA0CAsN,KAAA,SAAAtC,EAAA1B,EAAAsC,GAMA,OALA5L,KAGA8Q,GAAA9F,EAAA1B,EAAAsC,EAAA,GAHA5L,MAeAsG,MAAA,SAAA0E,EAAAY,EAAA0F,GAKA,IAJA,IACAP,EADA/Q,KACA,MAAAgL,GAGAlJ,EAAAiP,EAAAhP,OAAA,EAAiCD,GAAA,EAAMA,IAEvCiP,EAAAjP,GAAA8J,IAAAmF,EAAAjP,GAAA8J,QAAA,SAAAZ,IACA1D,WAAA,SAAAgC,GACAA,EAAAiI,KAAAvR,KAAA4L,EAAA0F,IACWjE,KATXrN,KASW+Q,EAAAjP,GAAAwH,IAAA,GAGXyH,EAAAjP,GAAAwL,MAZAtN,KAaAgR,IAAAhG,EAAA+F,EAAAjP,GAAAwH,GAAAyH,EAAAjP,GAAA8J,KAQA,OArBA5L,KAmBAkM,WAAAlB,GAnBAhL,MA8BAkM,WAAA,SAAAlB,GAGA,GAFAhL,KAEAkJ,OAAAnH,OAAA,GACA,IAAAyP,EAHAxR,KAGAkJ,OAAA,GAGAsI,EAAAxG,YANAhL,KAOAkJ,OAAAuI,QAPAzR,KAQAkM,cAIAlB,GACAwG,EAAAvG,SAIA,OAjBAjL,MAyBA8L,OAAA,SAAA1J,GACA,IACAsG,EAAAtG,EAAAqG,QAKA,IANAzI,KAMAgC,WAAAI,EAAAE,QAAAF,EAAAE,MAAAoL,SAAAtL,EAAAE,MAAAoP,OAAAtP,EAAAE,MAAAT,YAAAO,EAAAyK,MAEA,OADAvF,WAPAtH,KAOA8L,OAAAuB,KAPArN,KAOAoC,GAAA,KAPApC,KAYA,IAAAkI,KAAA9F,EAAA6F,OAZAjI,KAYAyI,QAAAC,GAAA,IAWA,GAvBA1I,KAeAsG,MAAA,MAAAlE,EAAA2J,MAfA/L,KAkBAgC,WAAAkG,GAlBAlI,KAmBA0M,KAAAtK,EAAA2J,IAAA,MAAApF,KAAAvE,EAAA2J,KAnBA/L,KAuBAgC,WAAAkG,EAAA,CAvBAlI,KAwBAsG,MAAA,OAAAlE,EAAA2J,KACA3J,EAAAkK,MAAAlK,EAAAwK,QAAA,EACAxK,EAAA6L,UAAA,EACA7L,EAAA6K,WAAA7M,EAAAgB,IAAAS,YAEA,IAAA2K,EAAA,KAAApK,EAAAyK,MAAAzK,EAAAwK,QAAAR,KAAAK,IAAArK,EAAAmG,OA7BAvI,KA8BAiJ,WAAA7G,EAAA2J,KAAAzE,WA9BAtH,KA8BA8L,OAAAuB,KA9BArN,KA8BAoC,GAAAoK,GAuBA,OArDAxM,KAkCAgC,YAAAkG,IACA9F,EAAA+E,QAAA,KACA/E,EAAA0J,OAAA,KACA1J,EAAAkK,MAAAlK,EAAAwK,QAAA,EACAxK,EAAA6L,UAAA,EAtCAjO,KAuCAuN,YAAAnL,EAAA2J,KAvCA/L,KA0CAoO,aAAAhM,EAAAE,OAGAlC,EAAA2C,gBA7CA/C,KAiDAgC,WAAAkG,GAjDAlI,KAkDA0M,KAAAtK,EAAA2J,IAAA,MAlDA/L,MA6DAuN,YAAA,SAAA3B,GAGA,GAFA5L,KAEAiJ,WAAA2C,GAAA,CAEA,sBAJA5L,KAIAiJ,WAAA2C,GACAvE,aALArH,KAKAiJ,WAAA2C,QACS,CACT,IAAAxJ,EAPApC,KAOAqC,WAAAuJ,GACAxJ,KAAAE,OACAF,EAAAE,MAAA+D,oBAAA,QATArG,KASAiJ,WAAA2C,GAAA,cATA5L,KAaAiJ,WAAA2C,GAGA,OAhBA5L,MAwBAqC,WAAA,SAAAuJ,GAIA,IAHA,IAGA9J,EAAA,EAAmBA,EAHnB9B,KAGmBkH,QAAAnF,OAAuBD,IAC1C,GAAA8J,IAJA5L,KAIAkH,QAAApF,GAAAiK,IACA,OALA/L,KAKAkH,QAAApF,GAIA,aAOAkK,eAAA,WACAhM,KAEA2R,SAGA,QAAA7P,EAAA,EAAmBA,EALnB9B,KAKmBkH,QAAAnF,OAAuBD,IAC1C,GANA9B,KAMAkH,QAAApF,GAAAgK,OACA,OAPA9L,KAOAkH,QAAApF,GAAA8P,QAKA,WAAAnG,EAZAzL,OAkBA2R,OAAA,WACA,IACAE,EADA7R,KACAmI,MACA2J,EAAA,EACAhQ,EAAA,EAGA,KANA9B,KAMAkH,QAAAnF,OAAA8P,GAAA,CAKA,IAAA/P,EAAA,EAAeA,EAXf9B,KAWekH,QAAAnF,OAAuBD,IAXtC9B,KAYAkH,QAAApF,GAAAgK,QACAgG,IAKA,IAAAhQ,EAlBA9B,KAkBAkH,QAAAnF,OAAA,EAAqCD,GAAA,EAAMA,IAAA,CAC3C,GAAAgQ,GAAAD,EACA,OApBA7R,KAuBAkH,QAAApF,GAAAgK,SAvBA9L,KAyBAgC,WAzBAhC,KAyBAkH,QAAApF,GAAAQ,OAzBAtC,KA0BAkH,QAAApF,GAAAQ,MAAA6D,WAAA,GA1BAnG,KA8BAkH,QAAAyJ,OAAA7O,EAAA,GACAgQ,QAUA5P,aAAA,SAAA0J,GAGA,YAAAA,EAAA,CAEA,IADA,IAAA3J,KACAH,EAAA,EAAqBA,EAJrB9B,KAIqBkH,QAAAnF,OAAuBD,IAC5CG,EAAA+E,KALAhH,KAKAkH,QAAApF,GAAAiK,KAGA,OAAA9J,EAEA,OAAA2J,IASAoB,eAAA,SAAA5K,GAsBA,OAlBAA,EAAAE,MAAA4K,aAAA9M,EAAAgB,IAAAuE,qBACAvD,EAAAE,MAAA4K,aAAAtH,OAAAiL,EAJA7Q,KAIA2I,MAGAvG,EAAA2P,QACA3P,EAAAE,MAAA4K,aAAArH,QAAAzD,EAAA2P,SAEA3P,EAAAE,MAAA4K,aAAArH,QAAAzD,EAAAE,OAIAF,EAAAE,MAAA4K,aAAAhF,KAAA9F,EAAA6F,MACA7F,EAAA6F,QACA7F,EAAAE,MAAA4K,aAAA8C,UAAA5N,EAAAwK,QAAA,EACAxK,EAAAE,MAAA4K,aAAA+C,QAAA7N,EAAAyK,OAAA,GAEAzK,EAAAE,MAAA4K,aAAAO,aAAA7L,eAAAQ,EAAAmG,MAAAnI,EAAAgB,IAAAS,aAnBA7B,MA6BAoO,aAAA,SAAAtB,GACA,IACAkF,EAAA5R,EAAAS,YAAAT,EAAAS,WAAAoR,OAAAxD,QAAA,YAEA,GAAArO,EAAA8E,gBAAA4H,EAAAI,eACAJ,EAAAI,aAAAhH,QAAA,KACA4G,EAAAI,aAAA/G,WAAA,GACA6L,GACA,IAAelF,EAAAI,aAAAtH,OAAAxF,EAAA8E,eAAoD,MAAAhC,IAKnE,OAFA4J,EAAAI,aAAA,KAVAlN,OAuBA,IAAAyL,EAAA,SAAAyG,GACAlS,KAAAmS,QAAAD,EACAlS,KAAAC,QAEAwL,EAAAvL,WAKAD,KAAA,WACA,IACAmS,EADApS,KACAmS,QAqBA,OAtBAnS,KAIAU,OAAA0R,EAAA1R,OAJAV,KAKAiI,MAAAmK,EAAAnK,MALAjI,KAMAW,QAAAyR,EAAAzR,QANAX,KAOAuI,MAAA6J,EAAA7J,MAPAvI,KAQAsM,MAAA,EARAtM,KASAmH,QAAA,KATAnH,KAUA8L,OAAA,KAVA9L,KAWAyI,QAAA,YAXAzI,KAcA+L,MAAA3L,EAAAC,SAGA+R,EAAAlL,QAAAF,KAjBAhH,WAoBAqS,SApBArS,MA6BAqS,OAAA,WACA,IACAD,EADApS,KACAmS,QACA5Q,EAAAnB,EAAAM,QAFAV,KAEAU,QAFAV,KAEAmS,QAAAzR,OAAA,EAFAV,KAEAW,QA6BA,OA3BAyR,EAAApQ,WAJAhC,KAMAsC,WAAA,IAAAlC,EAAAgB,IAAAkR,WAAAlS,EAAAgB,IAAAmR,iBAAAnS,EAAAgB,IAAAkR,aANAtS,KAOAsC,MAAAX,KAAAC,eAAAL,EAAAnB,EAAAgB,IAAAS,aAPA7B,KAQAsC,MAAAoL,OAAA,KARA1N,KASAsC,MAAAuD,QAAAzF,EAAAY,cATAhB,KAYAsC,MAAAlC,EAAAoG,oBAZAxG,KAeAwQ,SAfAxQ,KAeAwS,eAAAnF,KAfArN,WAgBAsC,MAAAiE,iBAAA,QAhBAvG,KAgBAwQ,SAAA,OAhBAxQ,KAmBAyQ,QAnBAzQ,KAmBAyS,cAAApF,KAnBArN,WAoBAsC,MAAAiE,iBAAAnG,EAAAQ,cApBAZ,KAoBAyQ,QAAA,OApBAzQ,KAuBAsC,MAAAoF,IAAA0K,EAAAzJ,KAvBA3I,KAwBAsC,MAAAgG,QAAA,OAxBAtI,KAyBAsC,MAAAf,SAAAnB,EAAAmB,SAzBAvB,KA4BAsC,MAAAkD,QA5BAxF,MAsCA4R,MAAA,WACA,IACAQ,EADApS,KACAmS,QAgBA,OAjBAnS,KAIAU,OAAA0R,EAAA1R,OAJAV,KAKAiI,MAAAmK,EAAAnK,MALAjI,KAMAW,QAAAyR,EAAAzR,QANAX,KAOAuI,MAAA6J,EAAA7J,MAPAvI,KAQAsM,MAAA,EARAtM,KASAiO,UAAA,EATAjO,KAUAmH,QAAA,KAVAnH,KAWA8L,OAAA,KAXA9L,KAYAyI,QAAA,YAZAzI,KAeA+L,MAAA3L,EAAAC,SAfAL,MAuBAwS,eAAA,WACAxS,KAGAmS,QAAA7L,MAAA,YAHAtG,KAGA+L,IAHA/L,KAGAsC,MAAAoQ,MAHA1S,KAGAsC,MAAAoQ,MAAAC,KAAA,GAHA3S,KAMAsC,MAAA+D,oBAAA,QANArG,KAMAwQ,SAAA,QAMAiC,cAAA,WACA,IACAL,EADApS,KACAmS,QAGAC,EAAArJ,UAAAqD,KAAAwG,KAAA,GAJA5S,KAIAsC,MAAAiK,UAAA,GAGA,IAAA4E,OAAAD,KAAAkB,EAAA3J,SAAA1G,SACAqQ,EAAA3J,SAA0BoK,WAAA,MAAAT,EAAArJ,aAG1B,WAAAqJ,EAAApJ,SACAoJ,EAAApJ,OAAA,SACAoJ,EAAA9L,MAAA,QACA8L,EAAAlG,cAdAlM,KAkBAsC,MAAA+D,oBAAAjG,EAAAQ,cAlBAZ,KAkBAyQ,QAAA,SAOA,IAAAI,KAMAnF,EAAA,SAAAvL,GACA,IAAA+K,EAAA/K,EAAAwI,KAGA,GAAAkI,EAAA3F,GAOA,OALA/K,EAAA4I,UAAA8H,EAAA3F,GAAAqB,cAGAuG,EAAA3S,GAKA,yBAAqB2E,KAAAoG,GAAA,CAIrB,IAFA,IAAA6H,EAAAC,KAAA9H,EAAArH,MAAA,SACAoP,EAAA,IAAAC,WAAAH,EAAAhR,QACAD,EAAA,EAAmBA,EAAAiR,EAAAhR,SAAeD,EAClCmR,EAAAnR,GAAAiR,EAAAI,WAAArR,GAGAsR,EAAAH,EAAArN,OAAAzF,OACK,CAEL,IAAAkT,EAAA,IAAAC,eACAD,EAAAE,KAAA,MAAArI,EAAA,MACAmI,EAAAG,gBAAArT,EAAA0I,oBACAwK,EAAAI,aAAA,cACAJ,EAAA3J,OAAA,WAEA,IAAAiJ,GAAAU,EAAAK,OAAA,OACA,MAAAf,GAAA,MAAAA,GAAA,MAAAA,EAKAS,EAAAC,EAAAM,SAAAxT,GAJAA,EAAAmG,MAAA,2DAAA+M,EAAAK,OAAA,MAMAL,EAAAO,QAAA,WAEAzT,EAAA6B,YACA7B,EAAA4H,OAAA,KACA5H,EAAA6B,UAAA,MACA7B,EAAA+G,kBACA2J,EAAA3F,GACA/K,EAAAqF,SAGAqO,EAAAR,KAQAQ,EAAA,SAAAR,GACA,IACAA,EAAAS,OACK,MAAA5Q,GACLmQ,EAAAO,YASAR,EAAA,SAAAW,EAAA5T,GAEA,IAAAuS,EAAA,WACAvS,EAAAmG,MAAA,iDAIA0N,EAAA,SAAApO,GACAA,GAAAzF,EAAA+G,QAAAnF,OAAA,GACA8O,EAAA1Q,EAAAwI,MAAA/C,EACAkN,EAAA3S,EAAAyF,IAEA8M,KAKA,oBAAA9L,SAAA,IAAAxG,EAAAgB,IAAAgS,gBAAArR,OACA3B,EAAAgB,IAAAgS,gBAAAW,GAAAlN,KAAAmN,GAAAlN,MAAA4L,GAEAtS,EAAAgB,IAAAgS,gBAAAW,EAAAC,EAAAtB,IASAI,EAAA,SAAA3S,EAAAyF,GAEAA,IAAAzF,EAAA4I,YACA5I,EAAA4I,UAAAnD,EAAA2G,UAIA,IAAA4E,OAAAD,KAAA/Q,EAAAsI,SAAA1G,SACA5B,EAAAsI,SAAsBoK,WAAA,MAAA1S,EAAA4I,aAItB,WAAA5I,EAAA6I,SACA7I,EAAA6I,OAAA,SACA7I,EAAAmG,MAAA,QACAnG,EAAA+L,eAOAxK,EAAA,WAEA,GAAAtB,EAAAc,cAAA,CAKA,IACA,oBAAA+S,aACA7T,EAAAgB,IAAA,IAAA6S,aACO,oBAAAC,mBACP9T,EAAAgB,IAAA,IAAA8S,mBAEA9T,EAAAc,cAAA,MAEK,MAAAgC,GACL9C,EAAAc,cAAA,MAIAd,EAAAgB,MACAhB,EAAAc,cAAA,OAKA,IAAAiT,EAAA,iBAAArP,KAAA1E,EAAAS,YAAAT,EAAAS,WAAAuT,UACAC,EAAAjU,EAAAS,YAAAT,EAAAS,WAAAwT,WAAA3Q,MAAA,0BACA4Q,EAAAD,EAAAzQ,SAAAyQ,EAAA,YACA,GAAAF,GAAAG,KAAA,GACA,IAAAC,EAAA,SAAAzP,KAAA1E,EAAAS,YAAAT,EAAAS,WAAA4C,UAAA4H,gBACAjL,EAAAS,YAAAT,EAAAS,WAAA2T,aAAAD,GAAAnU,EAAAS,aAAAT,EAAAS,WAAA2T,aAAAD,KACAnU,EAAAc,cAAA,OAKAd,EAAAc,gBACAd,EAAAY,gBAAA,IAAAZ,EAAAgB,IAAAkR,WAAAlS,EAAAgB,IAAAmR,iBAAAnS,EAAAgB,IAAAkR,aACAlS,EAAAY,WAAAW,KAAAC,eAAAxB,EAAAM,OAAA,IAAAN,EAAAgB,IAAAS,aACAzB,EAAAY,WAAA6E,QAAAzF,EAAAgB,IAAA0E,cAIA1F,EAAAkB,gBAUKsH,KALQ9I,EAAA,WACb,OACAM,SACAoH,SAEKkH,MAAA+F,SAAAC,EAAAD,QAAA3U,GAKL2U,EAAArU,SACAqU,EAAAjN,OAIA,oBAAA1G,QACAA,OAAAf,eACAe,OAAAV,SACAU,OAAA0G,OACA1G,OAAA2K,cACG,IAAA5L,IACHA,EAAAE,eACAF,EAAAO,SACAP,EAAA2H,OACA3H,EAAA4L,SA/5EA,GAg7EA,WAEA,aA8HA,IAAAkJ,EA3HA5U,aAAAG,UAAA0U,MAAA,OACA7U,aAAAG,UAAA2U,cAAA,cAWA9U,aAAAG,UAAA4U,OAAA,SAAAC,GAIA,IAHA/U,KAGAoB,MAHApB,KAGAoB,IAAA2M,SACA,OAJA/N,KAQA,QAAA8B,EARA9B,KAQAS,OAAAsB,OAAA,EAAoCD,GAAA,EAAMA,IAR1C9B,KASAS,OAAAqB,GAAAgT,OAAAC,GAGA,OAZA/U,MAuBAD,aAAAG,UAAA8U,IAAA,SAAAC,EAAAC,EAAAC,GAIA,OAHAnV,KAGAoB,KAHApB,KAGAoB,IAAA2M,UAKAmH,EAAA,iBAAAA,EARAlV,KAQA4U,KAAA,GAAAM,EACAC,EAAA,iBAAAA,EATAnV,KASA4U,KAAA,GAAAO,EAEA,iBAAAF,EAXAjV,KAsBA4U,MAtBA5U,KAYA4U,MAAAK,EAAAC,EAAAC,QAEA,IAdAnV,KAcAoB,IAAA2M,SAAAqH,WAdApV,KAeAoB,IAAA2M,SAAAqH,UAAAC,gBAfArV,KAeA4U,KAAA,GAAAxU,OAAAgB,IAAAS,YAAA,IAfA7B,KAgBAoB,IAAA2M,SAAAuH,UAAAD,gBAhBArV,KAgBA4U,KAAA,GAAAxU,OAAAgB,IAAAS,YAAA,IAhBA7B,KAiBAoB,IAAA2M,SAAAwH,UAAAF,gBAjBArV,KAiBA4U,KAAA,GAAAxU,OAAAgB,IAAAS,YAAA,KAjBA7B,KAmBAoB,IAAA2M,SAAAyH,YAnBAxV,KAmBA4U,KAAA,GAnBA5U,KAmBA4U,KAAA,GAnBA5U,KAmBA4U,KAAA,IAnBA5U,aA0CAD,aAAAG,UAAAuV,YAAA,SAAAR,EAAAC,EAAAC,EAAAO,EAAAC,EAAAC,GAIA,IAHA5V,KAGAoB,MAHApB,KAGAoB,IAAA2M,SACA,OAJA/N,KAQA,IAAA6V,EARA7V,KAQA6U,aAOA,OANAK,EAAA,iBAAAA,EAAAW,EAAA,GAAAX,EACAC,EAAA,iBAAAA,EAAAU,EAAA,GAAAV,EACAO,EAAA,iBAAAA,EAAAG,EAAA,GAAAH,EACAC,EAAA,iBAAAA,EAAAE,EAAA,GAAAF,EACAC,EAAA,iBAAAA,EAAAC,EAAA,GAAAD,EAEA,iBAAAX,EAcAY,GA7BA7V,KAgBA6U,cAAAI,EAAAC,EAAAC,EAAAO,EAAAC,EAAAC,QAEA,IAlBA5V,KAkBAoB,IAAA2M,SAAA+H,UAlBA9V,KAmBAoB,IAAA2M,SAAA+H,SAAAT,gBAAAJ,EAAA7U,OAAAgB,IAAAS,YAAA,IAnBA7B,KAoBAoB,IAAA2M,SAAAgI,SAAAV,gBAAAH,EAAA9U,OAAAgB,IAAAS,YAAA,IApBA7B,KAqBAoB,IAAA2M,SAAAiI,SAAAX,gBAAAF,EAAA/U,OAAAgB,IAAAS,YAAA,IArBA7B,KAsBAoB,IAAA2M,SAAAkI,IAAAZ,gBAAAJ,EAAA7U,OAAAgB,IAAAS,YAAA,IAtBA7B,KAuBAoB,IAAA2M,SAAAmI,IAAAb,gBAAAH,EAAA9U,OAAAgB,IAAAS,YAAA,IAvBA7B,KAwBAoB,IAAA2M,SAAAoI,IAAAd,gBAAAF,EAAA/U,OAAAgB,IAAAS,YAAA,KAxBA7B,KA0BAoB,IAAA2M,SAAAqI,eAAAnB,EAAAC,EAAAC,EAAAO,EAAAC,EAAAC,GA1BA5V,OA2CAwH,KAAAtH,UAAAD,MAAA0U,EA2BGnN,KAAAtH,UAAAD,KA1BH,SAAAwH,GAwBA,OAvBAzH,KAGA6U,aAAApN,EAAAgO,cAAA,OAHAzV,KAIAqW,QAAA5O,EAAAqN,QAAA,KAJA9U,KAKA4U,KAAAnN,EAAAuN,KAAA,KALAhV,KAMAsW,aACAC,oBAAA,IAAA9O,EAAA8O,eAAA9O,EAAA8O,eAAA,IACAC,oBAAA,IAAA/O,EAAA+O,eAAA/O,EAAA+O,eAAA,IACAC,mBAAA,IAAAhP,EAAAgP,cAAAhP,EAAAgP,cAAA,EACAC,mBAAA,IAAAjP,EAAAiP,cAAAjP,EAAAiP,cAAA,UACAC,iBAAA,IAAAlP,EAAAkP,YAAAlP,EAAAkP,YAAA,IACAC,kBAAA,IAAAnP,EAAAmP,aAAAnP,EAAAmP,aAAA,OACAC,iBAAA,IAAApP,EAAAoP,YAAApP,EAAAoP,YAAA,EACAC,mBAAA,IAAArP,EAAAqP,cAAArP,EAAAqP,cAAA,GAdA9W,KAkBA+W,UAAAtP,EAAAuP,WAAsC1N,GAAA7B,EAAAuP,cAlBtChX,KAmBAiX,OAAAxP,EAAAyP,QAAgC5N,GAAA7B,EAAAyP,WAnBhClX,KAoBAmX,eAAA1P,EAAA2P,gBAAgD9N,GAAA7B,EAAA2P,mBAGhDzC,EAAApD,KAAAvR,KAAAyH,KAUAD,KAAAtH,UAAA4U,OAAA,SAAAC,EAAAnJ,GACA,IAAAzL,EAAAH,KAGA,IAAAG,EAAA6B,UACA,OAAA7B,EAIA,cAAAA,EAAA6I,OAQA,OAPA7I,EAAA+I,OAAAlC,MACAgE,MAAA,SACAC,OAAA,WACA9K,EAAA2U,OAAAC,EAAAnJ,MAIAzL,EAIA,IAAAkX,OAAA,IAAAjX,OAAAgB,IAAAkW,mBAAA,mBAGA,YAAA1L,EAAA,CAEA,oBAAAmJ,EAIA,OAAA5U,EAAAkW,QAHAlW,EAAAkW,QAAAtB,EACA5U,EAAAyU,MAAAG,EAAA,KAQA,IADA,IAAA9S,EAAA9B,EAAA+B,aAAA0J,GACA9J,EAAA,EAAiBA,EAAAG,EAAAF,OAAcD,IAAA,CAE/B,IAAAM,EAAAjC,EAAAkC,WAAAJ,EAAAH,IAEA,GAAAM,EAAA,CACA,oBAAA2S,EA4BA,OAAA3S,EAAAiU,QA3BAjU,EAAAiU,QAAAtB,EACA3S,EAAAwS,MAAAG,EAAA,KAEA3S,EAAAE,QAEAF,EAAAkU,YAAAM,aAAA,aAGAxU,EAAA2P,SAAA3P,EAAA2P,QAAAgD,KACAwC,EAAAnV,EAAAiV,GAGA,YAAAA,OACA,IAAAjV,EAAA2P,QAAAqD,WACAhT,EAAA2P,QAAAqD,UAAAxT,eAAAmT,EAAA3U,OAAAgB,IAAAS,aACAO,EAAA2P,QAAAuD,UAAA1T,eAAA,EAAAxB,OAAAgB,IAAAS,aACAO,EAAA2P,QAAAwD,UAAA3T,eAAA,EAAAxB,OAAAgB,IAAAS,cAEAO,EAAA2P,QAAAyD,YAAAT,EAAA,KAGA3S,EAAA2P,QAAAgD,IAAAnT,eAAAmT,EAAA3U,OAAAgB,IAAAS,cAIA1B,EAAAmG,MAAA,SAAAlE,EAAA2J,MAOA,OAAA5L,GAWAqH,KAAAtH,UAAA8U,IAAA,SAAAC,EAAAC,EAAAC,EAAAvJ,GACA,IAAAzL,EAAAH,KAGA,IAAAG,EAAA6B,UACA,OAAA7B,EAIA,cAAAA,EAAA6I,OAQA,OAPA7I,EAAA+I,OAAAlC,MACAgE,MAAA,MACAC,OAAA,WACA9K,EAAA6U,IAAAC,EAAAC,EAAAC,EAAAvJ,MAIAzL,EAQA,GAJA+U,EAAA,iBAAAA,EAAA,EAAAA,EACAC,EAAA,iBAAAA,GAAA,GAAAA,OAGA,IAAAvJ,EAAA,CAEA,oBAAAqJ,EAGA,OAAA9U,EAAAyU,KAFAzU,EAAAyU,MAAAK,EAAAC,EAAAC,GAQA,IADA,IAAAlT,EAAA9B,EAAA+B,aAAA0J,GACA9J,EAAA,EAAiBA,EAAAG,EAAAF,OAAcD,IAAA,CAE/B,IAAAM,EAAAjC,EAAAkC,WAAAJ,EAAAH,IAEA,GAAAM,EAAA,CACA,oBAAA6S,EAoBA,OAAA7S,EAAAwS,KAnBAxS,EAAAwS,MAAAK,EAAAC,EAAAC,GAEA/S,EAAAE,QAEAF,EAAA2P,UAAA3P,EAAA2P,QAAAgD,KACAwC,EAAAnV,EAAA,gBAGA,IAAAA,EAAA2P,QAAAqD,WACAhT,EAAA2P,QAAAqD,UAAAxT,eAAAqT,EAAA7U,OAAAgB,IAAAS,aACAO,EAAA2P,QAAAuD,UAAA1T,eAAAsT,EAAA9U,OAAAgB,IAAAS,aACAO,EAAA2P,QAAAwD,UAAA3T,eAAAuT,EAAA/U,OAAAgB,IAAAS,cAEAO,EAAA2P,QAAAyD,YAAAP,EAAAC,EAAAC,IAIAhV,EAAAmG,MAAA,MAAAlE,EAAA2J,MAOA,OAAA5L,GAaAqH,KAAAtH,UAAAuV,YAAA,SAAAR,EAAAC,EAAAC,EAAAvJ,GACA,IAAAzL,EAAAH,KAGA,IAAAG,EAAA6B,UACA,OAAA7B,EAIA,cAAAA,EAAA6I,OAQA,OAPA7I,EAAA+I,OAAAlC,MACAgE,MAAA,cACAC,OAAA,WACA9K,EAAAsV,YAAAR,EAAAC,EAAAC,EAAAvJ,MAIAzL,EAQA,GAJA+U,EAAA,iBAAAA,EAAA/U,EAAA0U,aAAA,GAAAK,EACAC,EAAA,iBAAAA,EAAAhV,EAAA0U,aAAA,GAAAM,OAGA,IAAAvJ,EAAA,CAEA,oBAAAqJ,EAGA,OAAA9U,EAAA0U,aAFA1U,EAAA0U,cAAAI,EAAAC,EAAAC,GAQA,IADA,IAAAlT,EAAA9B,EAAA+B,aAAA0J,GACA9J,EAAA,EAAiBA,EAAAG,EAAAF,OAAcD,IAAA,CAE/B,IAAAM,EAAAjC,EAAAkC,WAAAJ,EAAAH,IAEA,GAAAM,EAAA,CACA,oBAAA6S,EAyBA,OAAA7S,EAAAyS,aAxBAzS,EAAAyS,cAAAI,EAAAC,EAAAC,GAEA/S,EAAAE,QAEAF,EAAA2P,UAEA3P,EAAAwS,OACAxS,EAAAwS,KAAAzU,EAAAyU,OAAA,UAGA2C,EAAAnV,EAAA,iBAGA,IAAAA,EAAA2P,QAAAyF,cACApV,EAAA2P,QAAAyF,aAAA5V,eAAAqT,EAAA7U,OAAAgB,IAAAS,aACAO,EAAA2P,QAAA0F,aAAA7V,eAAAsT,EAAA9U,OAAAgB,IAAAS,aACAO,EAAA2P,QAAA2F,aAAA9V,eAAAuT,EAAA/U,OAAAgB,IAAAS,cAEAO,EAAA2P,QAAAqE,eAAAnB,EAAAC,EAAAC,IAIAhV,EAAAmG,MAAA,cAAAlE,EAAA2J,MAOA,OAAA5L,GAiCAqH,KAAAtH,UAAAyX,WAAA,WACA,IAEAlQ,EAAAmE,EAAAxJ,EADAoM,EAAAF,UAIA,IALAtO,KAKAgC,UACA,OANAhC,KAUA,OAAAwO,EAAAzM,OAEA,OAZA/B,KAYAsW,YACK,OAAA9H,EAAAzM,OAAA,CACL,oBAAAyM,EAAA,GAgCA,OADApM,EA7CApC,KA6CAqC,WAAAuB,SAAA4K,EAAA,SACApM,EAAAkU,YA9CAtW,KA8CAsW,YA/BA7O,EAAA+G,EAAA,QAGA,IAAA5C,IACAnE,EAAAkQ,aACAlQ,EAAAkQ,YACApB,eAAA9O,EAAA8O,eACAC,eAAA/O,EAAA+O,eACAC,cAAAhP,EAAAgP,cACAC,cAAAjP,EAAAiP,cACAC,YAAAlP,EAAAkP,YACAE,YAAApP,EAAAoP,YACAC,cAAArP,EAAAqP,cACAF,aAAAnP,EAAAmP,eA5BA5W,KAgCAsW,aACAC,oBAAA,IAAA9O,EAAAkQ,WAAApB,eAAA9O,EAAAkQ,WAAApB,eAjCAvW,KAiCA4X,gBACApB,oBAAA,IAAA/O,EAAAkQ,WAAAnB,eAAA/O,EAAAkQ,WAAAnB,eAlCAxW,KAkCA6X,gBACApB,mBAAA,IAAAhP,EAAAkQ,WAAAlB,cAAAhP,EAAAkQ,WAAAlB,cAnCAzW,KAmCA8X,eACApB,mBAAA,IAAAjP,EAAAkQ,WAAAjB,cAAAjP,EAAAkQ,WAAAjB,cApCA1W,KAoCA+X,eACApB,iBAAA,IAAAlP,EAAAkQ,WAAAhB,YAAAlP,EAAAkQ,WAAAhB,YArCA3W,KAqCAgY,aACAnB,iBAAA,IAAApP,EAAAkQ,WAAAd,YAAApP,EAAAkQ,WAAAd,YAtCA7W,KAsCAiY,aACAnB,mBAAA,IAAArP,EAAAkQ,WAAAb,cAAArP,EAAAkQ,WAAAb,cAvCA9W,KAuCAkY,eACAtB,kBAAA,IAAAnP,EAAAkQ,WAAAf,aAAAnP,EAAAkQ,WAAAf,aAxCA5W,KAwCAmY,qBAQK,IAAA3J,EAAAzM,SACL0F,EAAA+G,EAAA,GACA5C,EAAAhI,SAAA4K,EAAA,QAKA,IADA,IAAAvM,EAtDAjC,KAsDAkC,aAAA0J,GACA9J,EAAA,EAAiBA,EAAAG,EAAAF,OAAcD,IAG/B,GAFAM,EAxDApC,KAwDAqC,WAAAJ,EAAAH,IAEA,CAEA,IAAAsW,EAAAhW,EAAAkU,YACA8B,GACA7B,oBAAA,IAAA9O,EAAA8O,eAAA9O,EAAA8O,eAAA6B,EAAA7B,eACAC,oBAAA,IAAA/O,EAAA+O,eAAA/O,EAAA+O,eAAA4B,EAAA5B,eACAC,mBAAA,IAAAhP,EAAAgP,cAAAhP,EAAAgP,cAAA2B,EAAA3B,cACAC,mBAAA,IAAAjP,EAAAiP,cAAAjP,EAAAiP,cAAA0B,EAAA1B,cACAC,iBAAA,IAAAlP,EAAAkP,YAAAlP,EAAAkP,YAAAyB,EAAAzB,YACAE,iBAAA,IAAApP,EAAAoP,YAAApP,EAAAoP,YAAAuB,EAAAvB,YACAC,mBAAA,IAAArP,EAAAqP,cAAArP,EAAAqP,cAAAsB,EAAAtB,cACAF,kBAAA,IAAAnP,EAAAmP,aAAAnP,EAAAmP,aAAAwB,EAAAxB,cAIA,IAAAyB,EAAAjW,EAAA2P,QACAsG,GACAA,EAAA9B,eAAA6B,EAAA7B,eACA8B,EAAA7B,eAAA4B,EAAA5B,eACA6B,EAAA5B,cAAA2B,EAAA3B,cACA4B,EAAA3B,cAAA0B,EAAA1B,cACA2B,EAAA1B,YAAAyB,EAAAzB,YACA0B,EAAAxB,YAAAuB,EAAAvB,YACAwB,EAAAvB,cAAAsB,EAAAtB,cACAuB,EAAAzB,aAAAwB,EAAAxB,eAGAxU,EAAAwS,OACAxS,EAAAwS,KAtFA5U,KAsFA4U,OAAA,UAIA2C,EAAAnV,EAAA,YAKA,OA/FApC,MA0GAyL,MAAAvL,UAAAD,KAAA,SAAA0U,GACA,kBACA,IACAvC,EADApS,KACAmS,QADAnS,KAIA6U,aAAAzC,EAAAyC,aAJA7U,KAKAqW,QAAAjE,EAAAiE,QALArW,KAMA4U,KAAAxC,EAAAwC,KANA5U,KAOAsW,YAAAlE,EAAAkE,YAGA3B,EAAApD,KAAAvR,MAVAA,KAaAqW,QACAjE,EAAA0C,OAdA9U,KAcAqW,SAdArW,KAeO4U,MACPxC,EAAA4C,IAhBAhV,KAgBA4U,KAAA,GAhBA5U,KAgBA4U,KAAA,GAhBA5U,KAgBA4U,KAAA,GAhBA5U,KAgBA+L,MAlBA,CAqBGN,MAAAvL,UAAAD,MAOHwL,MAAAvL,UAAA0R,MAAA,SAAA+C,GACA,kBACA,IACAvC,EADApS,KACAmS,QAqBA,OAtBAnS,KAIA6U,aAAAzC,EAAAyC,aAJA7U,KAKAqW,QAAAjE,EAAAiE,QALArW,KAMA4U,KAAAxC,EAAAwC,KANA5U,KAOAsW,YAAAlE,EAAAkE,YAPAtW,KAUAqW,QACAjE,EAAA0C,OAXA9U,KAWAqW,SAXArW,KAYO4U,KACPxC,EAAA4C,IAbAhV,KAaA4U,KAAA,GAbA5U,KAaA4U,KAAA,GAbA5U,KAaA4U,KAAA,GAbA5U,KAaA+L,KAbA/L,KAcO+R,UAdP/R,KAgBA+R,QAAA5L,WAAA,GAhBAnG,KAiBA+R,aAAAnJ,EACAwJ,EAAApF,eAlBAhN,OAsBA2U,EAAApD,KAAAvR,OAxBA,CA0BGyL,MAAAvL,UAAA0R,OAUH,IAAA2F,EAAA,SAAAnV,EAAAkW,GAIA,aAHAA,KAAA,YAIAlW,EAAA2P,QAAA3R,OAAAgB,IAAAmX,eACAnW,EAAA2P,QAAAwE,eAAAnU,EAAAkU,YAAAC,eACAnU,EAAA2P,QAAAyE,eAAApU,EAAAkU,YAAAE,eACApU,EAAA2P,QAAA0E,cAAArU,EAAAkU,YAAAG,cACArU,EAAA2P,QAAA2E,cAAAtU,EAAAkU,YAAAI,cACAtU,EAAA2P,QAAA4E,YAAAvU,EAAAkU,YAAAK,YACAvU,EAAA2P,QAAA8E,YAAAzU,EAAAkU,YAAAO,YACAzU,EAAA2P,QAAA+E,cAAA1U,EAAAkU,YAAAQ,cACA1U,EAAA2P,QAAA6E,aAAAxU,EAAAkU,YAAAM,kBAEA,IAAAxU,EAAA2P,QAAAqD,WACAhT,EAAA2P,QAAAqD,UAAAxT,eAAAQ,EAAAwS,KAAA,GAAAxU,OAAAgB,IAAAS,aACAO,EAAA2P,QAAAuD,UAAA1T,eAAAQ,EAAAwS,KAAA,GAAAxU,OAAAgB,IAAAS,aACAO,EAAA2P,QAAAwD,UAAA3T,eAAAQ,EAAAwS,KAAA,GAAAxU,OAAAgB,IAAAS,cAEAO,EAAA2P,QAAAyD,YAAApT,EAAAwS,KAAA,GAAAxS,EAAAwS,KAAA,GAAAxS,EAAAwS,KAAA,SAGA,IAAAxS,EAAA2P,QAAAyF,cACApV,EAAA2P,QAAAyF,aAAA5V,eAAAQ,EAAAyS,aAAA,GAAAzU,OAAAgB,IAAAS,aACAO,EAAA2P,QAAA0F,aAAA7V,eAAAQ,EAAAyS,aAAA,GAAAzU,OAAAgB,IAAAS,aACAO,EAAA2P,QAAA2F,aAAA9V,eAAAQ,EAAAyS,aAAA,GAAAzU,OAAAgB,IAAAS,cAEAO,EAAA2P,QAAAqE,eAAAhU,EAAAyS,aAAA,GAAAzS,EAAAyS,aAAA,GAAAzS,EAAAyS,aAAA,MAGAzS,EAAA2P,QAAA3R,OAAAgB,IAAAkW,qBACAlV,EAAA2P,QAAAgD,IAAAnT,eAAAQ,EAAAiU,QAAAjW,OAAAgB,IAAAS,cAGAO,EAAA2P,QAAAlM,QAAAzD,EAAAE,OAGAF,EAAA+E,SACA/E,EAAA+P,QAAAnE,MAAA5L,EAAA2J,IAAA,MAAApF,KAAAvE,EAAA2J,IAAA,OAjoBA,8CC17EA,IAAAyM,EAGAA,EAAA,WACA,OAAAxY,KADA,GAIA,IAEAwY,KAAA,IAAAC,SAAA,iBACC,MAAAvV,GAED,iBAAApC,SAAA0X,EAAA1X,QAOA4T,EAAAD,QAAA+D","file":"assets/js/vendor.e9736b1db52996dd4428.js","sourcesContent":["/*!\n *  howler.js v2.1.1\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on certain browsers/devices.\n      var shouldUnlock = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(self._navigator && self._navigator.userAgent);\n      if (self._audioUnlocked || !self.ctx || !shouldUnlock) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        for (var i=0; i<self.html5PoolSize; i++) {\n          var audioNode = new Audio();\n\n          // Mark this Audio object as unlocked to ensure it can get returned\n          // to the unlocked pool when released.\n          audioNode._unlocked = true;\n\n          // Add the audio node to the pool.\n          self._releaseHtml5Audio(audioNode);\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhrWithCredentials = o.xhrWithCredentials || false;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended. \n        // If there is, play that sound. If not, continue as usual.  \n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = loop;\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = parseFloat(from);\n      to = parseFloat(to);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Make sure the volume is in the right bounds.\n        vol = Math.max(0, vol);\n        vol = Math.min(1, vol);\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n          if (!checkIE) {\n            sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n          }\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.withCredentials = self._xhrWithCredentials;\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.1.1\n *  howlerjs.com\n *\n *  (c) 2013-2018, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}